module.exports = {
  
//
// WRITING
//
  
  /**
   * Writes an array with bytes to the packets Buffer from the current position
   *
   * @param {Array} byteArray A simple array with uint8 values ([0x00, 0xFF])
   * @return {Packet}
   */
  writeBytes: function(_buffer, byteArray, offset){
    for(i = 0; i < byteArray.length; i++) {
      _buffer[offset++] = byteArray[i];
    }
    if(offset > _bytesWritten) {
      _bytesWritten = offset;
    }
    return this;
  },
  
  /**
   * Write a 4-byte integer
   *
   * @param {integer} integer The value to write to the packet
   * @return {Packet}
   */
  writeInt32: function(_buffer, integer, offset) {
    _buffer[offset++] = (integer >>> 24);
    _buffer[offset++] = (integer >>> 16);
    _buffer[offset++] = (integer >>> 8);
    _buffer[offset++] = integer;
    return _buffer;
  },
  
  /**
   * Write a 2-byte integer
   *
   * @param {integer} integer The value to write to the packet
   * @return {Packet}
   */
  writeInt16: function(_buffer, integer, offset) {
    _buffer[offset++] = (integer >>> 8);
    _buffer[offset++] = integer;
    return _buffer;
  },
  
  /**
   * Write a 1-byte integer
   *
   * @param {integer} integer The value to write to the packet
   * @return {Packet}
   */
  writeInt8: function(_buffer, integer, offset) {
    _buffer[offset++] = integer;
    return _buffer;
  },
  
//
// READING
//
  
  /**
   * Reads the given length of bytes from the packets Buffer
   * and optionally (if the copy argument is true) creates a real copy of the Buffer
   *
   * @param {Integer} length
   * @param {Boolean} copy
   * @return {Buffer}
   */
  readBytes: function(_buffer, length, copy, offset){
    if(copy){
      var bufCopy = new Buffer(length);
      _buffer.copy(bufCopy, 0, offset, (offset += length));
      return bufCopy;
    } else {
      return _buffer.slice(offset, (offset += length));
    }
  },
  
  /**
   * Reads a 4-byte integer from the packet
   *
   * @return {Integer}
   */
  readInt32: function(_buffer, offset) {
    return (_buffer[offset++] << 24) | (_buffer[offset++] << 16) | (_buffer[offset++] << 8) | _buffer[offset++];    
  },
  
  /**
   * Reads a 2-byte integer from the packet
   *
   * @return {Integer}
   */
  readInt16: function(_buffer, offset) {
    return (_buffer[offset++] << 8) | _buffer[offset++];
  },
  
  /**
   * Reads a 1-byte integer from the packet
   *
   * @return {Integer}
   */
  readInt8: function(_buffer, offset) {
    return _buffer[offset++];
  }
  
};
