var util = require('util'),
    dhcp = require('./dhcp'),
    dgram = require('dgram');

// constructor
var Server = function() {
  dgram.Socket.apply(this, arguments);
  
  // enable broadcasts
  this.setBroadcast(true);
  
  var dummyCallback = function () { return {}; }
  this.discoverCallback = dummyCallback;
  this.requestCallback = dummyCallback;
  this.declineCallback = dummyCallback;
  this.releaseCallback = dummyCallback;
  this.informCallback = dummyCallback;
  
  var self = this;
  // handle incoming packets
  self.on('message', function(buffer, remote) {
    
    var packet = dhcp.Packet.fromBuffer(buffer);
    if (packet.op == 1) {
      
      var type_id = packet.options[53] ||Â 0,
          type_descr = dhcp.MessageTypes[type_id];
          
      util.log('Got '+type_descr+' from '+remote.address+':'+remote.port+' ('+packet.chaddr+') ' +
        'with packet length of '+buffer.length+' bytes');
      
      switch (parseInt(type_id)) {
        case 1: self.doDiscover(packet); break; // discover, send offer
        case 3: self.doRequest(packet); break; // request, send ack
        case 4: self.doDecline(packet); break; // decline, notify admin
        case 7: self.doRelease(packet); break; // release, release ip address, keep record
        case 8: self.doInform(packet); break; // inform, send ack to ciaddr, without yiaddr/lease time
      }
      
    } else {
      console.log('  Unsupported message format');
    }
    
  });
  
  process.on('uncaughtException', function(err) {
    require('util').debug('Uncaught Exception: ' + err);
  });

};
util.inherits(Server, dgram.Socket);

// call message callbacks to retreive params
// build a dgram packet and send it to the client
Server.prototype.doDiscover = function(packet) {
  this.emit('discover', packet);
  
  // configure byte array
  var params = this.discoverCallback(packet, packet.options[50] || null);
  if (params) {
    packet.op = 2;
    packet.yiaddr = params.yiaddr;
    packet.siaddr = params.siaddr;
  
    // set options
    packet.options = params.options;
    packet.options[53] = 2;
    
    // broadcast offer
    console.log(packet);
    var self = this, offer = dhcp.Packet.toBuffer(packet);
    this.send(offer, 0, offer.length, 68, '255.255.255.255', function(err, bytes) {
      if (err) self.emit('offerError', err, packet);
      else self.emit('offerSent', bytes, packet);
    });
  }
  
  // notify listeners
  this.emit('offer', packet);
};

Server.prototype.doRequest = function(packet) {
  this.emit('request', packet);
  
  var params = this.requestCallback(packet, packet.options[50] || null);
  if (params) {
    packet.op = 2;
    packet.yiaddr = params.yiaddr;
    packet.siaddr = params.siaddr;
  
    // set options
    packet.options = params.options;
    packet.options[53] = 5;
    
    // broadcast offer
    var self = this, buffer = dhcp.Packet.toBuffer(packet);
    this.send(buffer, 0, buffer.length, 68, '255.255.255.255', function(err, bytes) {
      if (err) self.emit('ackError', err, packet);
      else self.emit('ackSent', bytes, packet);
    });
  }
  
  // notify listeners
  this.emit('ack', packet);
};

Server.prototype.doDecline = function(packet) {
  var params = this.declineCallback(packet.options[50] || null);
  this.emit('decline', packet);
};
Server.prototype.doRelease = function(packet) {
  var params = this.releaseCallback(packet.options[50] || null);
  this.emit('release', packet);
};
Server.prototype.doInform = function(packet) {
  var params = this.informCallback(packet.options[50] || null);
  this.emit('inform', packet);
  // notify listeners
  this.emit('ack', packet);
};

// callback-registering methods
Server.prototype.discover = function(cb) {
  this.discoverCallback = cb;
}
Server.prototype.request = function(cb) {
  this.requestCallback = cb;
}
Server.prototype.decline = function(cb) {
  this.declineCallback = cb;
}
Server.prototype.release = function(cb) {
  this.releaseCallback = cb;
}
Server.prototype.inform = function(cb) {
  this.informCallback = cb;
}

module.exports = {
  createServer: function(type) {
    return new Server(type);
  },
  Server: Server,
  Packet: dhcp.Packet
}
