var util = require('util'),
    dhcp = require('./dhcp'),
    dgram = require('dgram');

// constructor
var DhcpServer = function() {
  dgram.Socket.apply(this, arguments);
  
  // enable broadcasts
  this.setBroadcast(true);
  
  var dummyCallback = function () { return {}; }
  this.discoverCallback = dummyCallback;
  this.requestCallback = dummyCallback;
  this.declineCallback = dummyCallback;
  this.releaseCallback = dummyCallback;
  this.informCallback = dummyCallback;
  
  var self = this;
  // handle incoming packets
  self.on('message', function(buffer, remote) {
    
    var packet = dhcp.Packet.fromBuffer(buffer);
    if (packet.op == 1) {
      
      var type_id = packet.options[53],
          type_descr = dhcp.MessageTypes[type_id];
          
      util.log('Got '+type_descr+' from '+packet.chaddr+' ('+remote.address+':'+remote.port+') ' +
        'with packet length of '+buffer.length+' bytes');
      
      switch (parseInt(type_id)) {
        case 1: self.doDiscover(packet); break; // discover, send offer
        case 3: self.doRequest(packet); break; // request, send ack
        case 4: self.doDecline(packet); break; // decline, notify admin
        case 7: self.doRelease(packet); break; // release, release ip address, keep record
        case 8: self.doInform(packet); break; // inform, send ack to ciaddr, without yiaddr/lease time
      }
      
    } else {
      console.log('  Unsupported message format');
    }
    
  });

};
util.inherits(DhcpServer, dgram.Socket);

// call message callbacks to retreive params
// build a dgram packet and send it to the client
DhcpServer.prototype.doDiscover = function(packet) {
  this.emit('discover', packet);
  
  // configure byte array
  var params = this.discoverCallback(packet, packet.options[50] || null);
  packet.op = 2;
  packet.yiaddr = params.yiaddr;
  packet.siaddr = params.siaddr;
  
  // clear options
  packet.options = {53: 2};
  for (var opt in params.options)
    packet.options[opt] = params.options[opt];
    
  // broadcast offer
  console.log(packet);
  var self = this, offer = dhcp.Packet.toBuffer(packet);
  this.send(offer, 0, offer.length, 68, '255.255.255.255', function(err, bytes) {
    if (err) self.emit('offerError', err, packet);
    else self.emit('offerSent', bytes, packet);
  });
  
  // notify listeners
  this.emit.apply(this, ['offer'].concat(arguments));
};

DhcpServer.prototype.doRequest = function(packet) {
  this.emit('request', packet);
  
  var params = this.requestCallback(packet, packet.options[50] || null);
  packet.op = 2;
  packet.yiaddr = params.yiaddr;
  packet.siaddr = params.siaddr;
  
  // clear options
  packet.options = {53: 5};
  for (var opt in params.options)
    packet.options[opt] = params.options[opt];
    
  // broadcast offer
  var self = this, buffer = dhcp.Packet.toBuffer(packet);
  this.send(buffer, 0, buffer.length, 68, '255.255.255.255', function(err, bytes) {
    if (err) self.emit('ackError', err, packet);
    else self.emit('ackSent', bytes, packet);
  });
  
  // notify listeners
  this.emit('ack', packet);
};

DhcpServer.prototype.doDecline = function(packet) {
  var params = this.declineCallback(packet.options[50] || null);
  this.emit('decline', packet);
};
DhcpServer.prototype.doRelease = function(packet) {
  var params = this.releaseCallback(packet.options[50] || null);
  this.emit('release', packet);
};
DhcpServer.prototype.doInform = function(packet) {
  var params = this.informCallback(packet.options[50] || null);
  this.emit('inform', packet);
  // notify listeners
  this.emit.apply(this, ['ack'].concat(arguments));
};

// callback-registering methods
DhcpServer.prototype.discover = function(cb) {
  this.discoverCallback = cb;
}
DhcpServer.prototype.request = function(cb) {
  this.requestCallback = cb;
}
DhcpServer.prototype.decline = function(cb) {
  this.declineCallback = cb;
}
DhcpServer.prototype.release = function(cb) {
  this.releaseCallback = cb;
}
DhcpServer.prototype.inform = function(cb) {
  this.informCallback = cb;
}

module.exports = {
  createServer: function(type) {
    return new DhcpServer(type);
  },
  Server: DhcpServer,
  Packet: dhcp.Packet
}
