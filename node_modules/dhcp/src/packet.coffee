sprintf = require('./sprintf')
optionDecoders = require('./option_decoders')
optionEncoders = require('./option_encoders')
converters = require('./converters')
utils = require('./utils')

DHCP = 
  options: require('./options')
  message_types: require('./message_types')
    

extractChaddr = (b) -> 
  [f, len, reg] = ["%02x", b[2], []]
  bytes = b.slice(28, 28+len)
  ret.push sprintf(f, octet) for byte in bytes
  ret.join ':'

fromBuffer = (b) ->
  ret =
    op: b[0]
    htype: b[1]
    hlen: b[2]
    hops: b[3]
    xid: utils.readInt32(b, 4) # b[4] + b[5] + b[6] + b[7];
    secs: utils.readInt16(b, 8) # b[8] + b[9];
    flags: utils.readInt16(b, 10) # b[10] + b[11];
    ciaddr: sprintf('%d.%d.%d.%d', b[12], b[13], b[14], b[15])
    yiaddr: sprintf('%d.%d.%d.%d', b[16], b[17], b[18], b[19])
    siaddr: sprintf('%d.%d.%d.%d', b[20], b[21], b[22], b[23])
    giaddr: sprintf('%d.%d.%d.%d', b[24], b[25], b[26], b[27])
    chaddr: extractChaddr(b)
    sname: '';

  ret.sname = (s for b in b.slice 44, 44+64).join ''
  ret.file = (s for b in b.slice 108, 236).join ''

  [i, options] = [0, b.slice(240)]
  while i < options.length and options[i] != 255
    optNum = parseInt options[i++], 10
    optLen = parseInt options[i++], 10
    optVal = converters(opt).decode(options.slice(i, i+optLen))
    ret.options[optNum] = optVal
    i += optLen

  ret