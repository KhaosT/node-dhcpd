// Generated by CoffeeScript 1.3.3
var DHCPServer, Socket, dhcp, util,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

util = require('util');

dhcp = require('./index');

Socket = require('dgram').Socket;

DHCPServer = (function(_super) {

  __extends(DHCPServer, _super);

  function DHCPServer() {
    var _this = this;
    DHCPServer.__super__.constructor.apply(this, arguments);
    this.on('message', function(buffer, remote) {
      var event_name, packet, type;
      packet = dhcp.Packet.fromBuffer(buffer);
      if (packet.op === 1) {
        type = {
          id: packet.options[53] || 0,
          name: dhcp.MessageTypes[packet.options[53] || 0]
        };
        util.log(("Got " + type.name + " from") + (" " + remote.address + ":" + remote.port + " (" + packet.chaddr + ") ") + (" with packet length of " + buffer.length + " bytes"));
        event_name = type.name.replace('DHCP', '').toLowerCase();
        return _this._emitPacket(event_name, packet);
      } else {
        return console.log("  Unsupported message format");
      }
    });
  }

  DHCPServer.prototype.bind = function() {
    var res;
    res = DHCPServer.__super__.bind.apply(this, arguments);
    this.setBroadcast(true);
    return res;
  };

  DHCPServer.prototype._send = function(event_name, ip, packet) {
    var buffer,
      _this = this;
    buffer = packet.toBuffer();
    util.log(("Sending " + dhcp.MessageTypes[packet.options[53]]) + (" to " + ip + ":68 (" + packet.chaddr + ")") + (" with packet length of " + buffer.length + " bytes"));
    this.emit(event_name, packet);
    return this.send(buffer, 0, buffer.length, 68, ip, function(err, bytes) {
      if (err) {
        return _this.emit("" + event_name + "Error", err, packet);
      } else {
        return _this.emit("" + event_name + "Sent", bytes, packet);
      }
    });
  };

  DHCPServer.prototype._emitPacket = function(message_type, packet) {
    return this.emit(message_type, packet, packet.options[50] || null);
  };

  DHCPServer.prototype.offer = function(packet, params) {
    if (params) {
      packet.yiaddr = params.yiaddr;
      packet.siaddr = params.siaddr;
      packet.options = params.options;
    }
    packet.op = packet.options[53] = 2;
    return this._send('offer', '255.255.255.255', packet);
  };

  DHCPServer.prototype.ack = function(packet, params) {
    if (params) {
      packet.yiaddr = params.yiaddr;
      packet.siaddr = params.siaddr;
      packet.options = params.options;
    }
    packet.op = 2;
    packet.options[53] = 5;
    return this._send('ack', '255.255.255.255', packet);
  };

  DHCPServer.prototype.nak = function(packet, params) {
    packet.op = 2;
    packet.options[53] = 6;
    return this._send('nak', packet.ciaddr, packet);
  };

  DHCPServer.prototype.inform = function(packet, params) {
    if (params) {
      packet.yiaddr = params.yiaddr;
      packet.siaddr = params.siaddr;
      packet.options = params.options;
    }
    packet.op = 2;
    packet.options[53] = 5;
    return this._send('inform', packet.ciaddr, packet);
  };

  DHCPServer.prototype.discoverCallback = function() {};

  DHCPServer.prototype.requestCallback = function() {};

  DHCPServer.prototype.declineCallback = function() {};

  DHCPServer.prototype.releaseCallback = function() {};

  DHCPServer.prototype.informCallback = function() {};

  return DHCPServer;

})(Socket);

module.exports = {
  createServer: function(type) {
    return new DHCPServer(type);
  },
  Server: DHCPServer,
  Packet: dhcp.Packet
};
